#BlueJ class context
comment0.target=Nonogram
comment0.text=\r\n\ A\ Nonogram\ puzzle.\r\n\r\n\ @author\ Dr\ Mark\ C.\ Sinclair\r\n\ @version\ September\ 2022\r\n
comment1.params=scnr
comment1.target=Nonogram(java.util.Scanner)
comment1.text=\r\n\ Constructor\ from\ a\ scanner\ (.non\ file\ format)\r\n\ see\ https\://github.com/mikix/nonogram-db/blob/master/FORMAT.md\r\n\r\n\ @param\ scnr\ the\ scanner\r\n
comment10.params=row
comment10.target=int[]\ getRowNums(int)
comment10.text=\r\n\ Retrieve\ the\ pattern\ of\ contiguous\ full\ cells\ for\ a\ given\ row\ as\ an\ integer\ array\r\n\r\n\ @param\ row\ the\ desired\ row\r\n\ @return\ the\ pattern\ of\ contiguous\ full\ cells\ in\ the\ row\ constraint\r\n
comment11.params=col
comment11.target=int[]\ getColNums(int)
comment11.text=\r\n\ Retrieve\ the\ pattern\ of\ contiguous\ full\ cells\ for\ a\ given\ column\ as\ an\ integer\ array\r\n\r\n\ @param\ col\ the\ desired\ column\r\n\ @return\ the\ pattern\ of\ contiguous\ full\ cells\ in\ the\ column\ constraint\r\n
comment12.params=row
comment12.target=java.lang.String\ getRowSequence(int)
comment12.text=\r\n\ Retrieve\ the\ cell\ states\ for\ a\ given\ row\ as\ a\ sequence\ string\r\n\r\n\ @param\ row\ the\ desired\ row\r\n\ @return\ the\ row\ cell\ states\r\n
comment13.params=col
comment13.target=java.lang.String\ getColSequence(int)
comment13.text=\r\n\ Retrieve\ the\ cell\ states\ for\ a\ given\ column\ as\ a\ sequence\ string\r\n\r\n\ @param\ col\ the\ desired\ column\r\n\ @return\ the\ column\ cell\ states\r\n
comment14.params=s
comment14.target=void\ setStatesByString(java.lang.String)
comment14.text=\r\n\ Set\ the\ cell\ states\ of\ an\ entire\ nonogram\ from\ a\ single\ cell\ state\ string\ (e.g.\ the\ goal\ in\ a\ .non\ file)\r\n\r\n\ @param\ s\ the\ goal\ string\r\n
comment15.params=row
comment15.target=boolean\ isRowValid(int)
comment15.text=\r\n\ Is\ a\ given\ row\ of\ cells\ valid\ against\ its\ constraint?\r\n\r\n\ @param\ row\ the\ desired\ row\r\n\ @return\ true\ if\ the\ row\ is\ valid,\ otherwise\ false\r\n
comment16.params=col
comment16.target=boolean\ isColValid(int)
comment16.text=\r\n\ Is\ a\ given\ column\ of\ cells\ valid\ against\ its\ constraint?\r\n\r\n\ @param\ col\ the\ desired\ column\r\n\ @return\ true\ if\ the\ column\ is\ valid,\ otherwise\ false\r\n
comment17.params=row
comment17.target=boolean\ isRowSolved(int)
comment17.text=\r\n\ Is\ a\ given\ row\ of\ cells\ solved?\ (Note\ that\ a\ row\ may\ be\ solved,\ but\ still\ incorrect\ depending\ on\ other\ columns.)\r\n\r\n\ @param\ row\ the\ desired\ row\r\n\ @return\ true\ if\ the\ row\ is\ solved,\ otherwise\ false\r\n
comment18.params=col
comment18.target=boolean\ isColSolved(int)
comment18.text=\r\n\ Is\ a\ given\ column\ of\ cells\ solved?\ (Note\ that\ a\ column\ may\ be\ solved,\ but\ still\ incorrect\ depending\ on\ other\ rows.)\r\n\r\n\ @param\ col\ the\ desired\ column\r\n\ @return\ true\ if\ the\ column\ is\ solved,\ otherwise\ false\r\n
comment19.params=
comment19.target=boolean\ isSolved()
comment19.text=\r\n\ Are\ all\ rows\ and\ columns,\ and\ therefore\ the\ whole\ puzzle,\ solved?\r\n\r\n\ @return\ true\ if\ all\ rows\ and\ coplumns\ are\ solved,\ otherwise\ false\r\n
comment2.params=
comment2.target=nonogram.non_gui.Cell[][]\ getCells()
comment2.text=\r\n\ This\ method\ returns\ the\ array\ of\ cells\ in\ the\ puzzle.\r\n\ This\ is\ primarily\ used\ in\ the\ JUnit\ test\r\n\ @return\ The\ array\ of\ cells\ in\ the\ puzzle.\r\n
comment20.params=
comment20.target=java.lang.String\ toStringAsNonFile()
comment20.text=\r\n\ String\ representation\ of\ the\ puzzle\ in\ .non\ file\ form\r\n\r\n\ @return\ the\ string\ representation\r\n
comment21.params=s
comment21.target=void\ trace(java.lang.String)
comment21.text=\r\n\ A\ trace\ method\ for\ debugging\ (active\ when\ traceOn\ is\ true)\r\n\r\n\ @param\ s\ the\ string\ to\ output\r\n
comment22.params=o
comment22.target=void\ addObserver(java.util.Observer)
comment22.text=\r\n\ Adds\ an\ observer\ to\ the\ list\ of\ observers\r\n\ @param\ o\ \ an\ observer\ to\ be\ added.\ In\ this\ case\ the\ GUI\r\n
comment23.params=filePath
comment23.target=boolean\ saveToFile(java.lang.String)
comment23.text=\r\n\ Save\ the\ state\ of\ the\ cells\ to\ a\ file\ to\ the\ file\ path.\r\n\ The\ state\ of\ the\ cells\ are\ saved\ as\ a\ comma\ separated\ integers\ representing\ a\ row\ or\ column\ states\r\n\ @param\ filePath\ the\ file\ path\ of\ the\ saved\ game\ state\r\n\ @return\ true\ if\ the\ game\ was\ successfully\ saved\ and\ false\ otherwise\r\n
comment24.params=filePath
comment24.target=boolean\ loadFromFile(java.lang.String)
comment24.text=\r\n\ Load\ a\ game\ from\ the\ specified\ file\ path.\r\n\ @param\ filePath\ the\ file\ path\ of\ the\ saved\ game\ file\r\n\ @return\ true\ if\ the\ game\ was\ successfully\ loaded\ and\ false\ if\ not\r\n
comment25.params=
comment25.target=void\ undoRecentMove()
comment25.text=\r\n\ Undo\ the\ recent\ move\ made.\r\n\ Removes\ the\ last\ move\ made\ if\ the\ historyStack\ is\ not\ empty\ and\ updates\ the\ relevant\ cell\ with\ its\ previous\ state.\r\n\ This\ method\ also\ notifies\ registered\ observers\ of\ the\ changes\ in\ the\ state\ of\ the\ cells\ after\ the\ undo\ is\ made.\r\n
comment3.params=cells
comment3.target=void\ setCells(nonogram.non_gui.Cell[][])
comment3.text=\r\n\ This\ method\ sets\ the\ array\ of\ cells\ for\ the\ puzzle.\r\n\ This\ is\ used\ in\ the\ NonogramTest\r\n\ @param\ cells\ The\ array\ of\ cells\ to\ set\ for\ the\ puzzle.\r\n
comment4.params=
comment4.target=int\ getNumRows()
comment4.text=\r\n\ Retrieve\ the\ number\ of\ rows\r\n\r\n\ @return\ the\ number\ of\ rows\r\n
comment5.params=
comment5.target=int\ getNumCols()
comment5.text=\r\n\ Retrieve\ the\ number\ of\ columns\r\n\r\n\ @return\ the\ number\ of\ columns\r\n
comment6.params=row\ col
comment6.target=int\ getState(int,\ int)
comment6.text=\r\n\ Retrieve\ the\ state\ of\ an\ individual\ cell\r\n\r\n\ @param\ row\ the\ cell\ row\r\n\ @param\ col\ the\ cell\ column\r\n\ @return\ the\ cell\ state\r\n
comment7.params=row\ col\ state
comment7.target=void\ setState(int,\ int,\ int)
comment7.text=\r\n\ Set\ the\ state\ of\ an\ individual\ cell,\ notifying\ observers\r\n\r\n\ @param\ row\ \ \ the\ cell\ row\r\n\ @param\ col\ \ \ the\ cell\ column\r\n\ @param\ state\ the\ new\ state\r\n
comment8.params=move
comment8.target=void\ setState(nonogram.non_gui.Assign)
comment8.text=\r\n\ Set\ the\ state\ of\ an\ individual\ cell\ using\ the\ data\ in\ an\ Assign\ object\r\n\r\n\ @param\ move\ the\ Assign\r\n
comment9.params=
comment9.target=void\ clear()
comment9.text=\r\n\ Resets\ the\ game\ to\ its\ initial\ state\ by\ setting\ all\ cells\ to\ UNKNOWN\ and\ clearing\ the\ savedHistory\ stack.\r\n\ Also\ notifies\ observers\ of\ the\ change.\r\n
numComments=26
