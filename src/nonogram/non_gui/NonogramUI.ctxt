#BlueJ class context
comment0.target=NonogramUI
comment0.text=\r\n\ A\ text-based\ user\ interface\ to\ a\ Nonogram\ puzzle.\r\n\r\n\ @author\ Dr\ Mark\ C.\ Sinclair\r\n\ @version\ September\ 2022\r\n
comment1.params=
comment1.target=NonogramUI()
comment1.text=\r\n\ Default\ constructor\r\n
comment10.params=filename
comment10.target=void\ save(java.lang.String)
comment11.params=
comment11.target=void\ reset()
comment12.params=
comment12.target=void\ undo()
comment13.params=
comment13.target=void\ help()
comment13.text=\r\n\ Display\ some\ use4ful\ help\ text\ on\ the\ puzzle\r\n
comment14.params=
comment14.target=void\ move()
comment14.text=\r\n\ Make\ a\ move\r\n
comment15.params=
comment15.target=nonogram.non_gui.Assign\ getUserMove()
comment15.text=\r\n\ Get\ the\ user's\ move\r\n\r\n\ @return\ the\ user\ move\r\n
comment16.params=
comment16.target=void\ rowMultiMove()
comment16.text=\r\n\ Make\ a\ multi-column\ row\ move\r\n
comment17.params=
comment17.target=java.util.ArrayList\ getRowMultiUserMove()
comment17.text=\r\n\ Get\ the\ user's\ multi-column\ row\ move\r\n\r\n\ @return\ the\ move\ as\ list\ of\ moves\ (or\ null\ on\ error)\r\n
comment18.params=
comment18.target=void\ colMultiMove()
comment18.text=\r\n\ Make\ a\ multi-row\ column\ move\r\n
comment19.params=
comment19.target=java.util.ArrayList\ getColMultiUserMove()
comment19.text=\r\n\ Get\ the\ user's\ multi-row\ column\ move\r\n\r\n\ @return\ the\ move\ as\ an\ array-list\ of\ moves\ (or\ null\ on\ error)\r\n
comment2.params=showFullOnly
comment2.target=java.lang.String\ display(boolean)
comment2.text=\r\n\ A\ string\ representation\ of\ a\ Nonogram\ puzzle\ suitable\ for\ console\ display\r\n\ If\ showFullOnly\ is\ set,\ the\ unknown\ cells\ are\ shown\ as\ empty.\r\n\r\n\ @param\ showFullOnly\ show\ all\ non\ full\ cells\ as\ empty\r\n\ @return\ a\ string\ representation\ of\ the\ puzzle\ for\ display\r\n
comment20.params=prompt
comment20.target=int\ getInt(java.lang.String)
comment20.text=\r\n\ Get\ an\ integer\ from\ the\ user\r\n\r\n\ @param\ prompt\ a\ string\ to\ prompt\ the\ user\r\n\ @return\ the\ integer\ (or\ -1\ on\ error)\r\n
comment21.params=prompt
comment21.target=char\ getChar(java.lang.String)
comment21.text=\r\n\ Get\ a\ character\ from\ the\ user\r\n\r\n\ @param\ prompt\ a\ string\ to\ prompt\ the\ user\r\n\ @return\ the\ character\ (or\ '?'\ on\ error)\r\n
comment22.params=c
comment22.target=int\ numFromChar(char)
comment22.text=\r\n\ Get\ a\ number\ from\ a\ character\ representation\ (0-9A-Za-z)\r\n\r\n\ @param\ c\ the\ character\ representation\r\n\ @return\ the\ integer\ representation\ (or\ -1\ on\ error)\r\n
comment23.params=i
comment23.target=char\ numAsChar(int)
comment23.text=\r\n\ Get\ a\ character\ representation\ (0-9A-Za-z)\ of\ a\ number\r\n\r\n\ @param\ i\ the\ integer\ (must\ be\ positive)\r\n\ @return\ the\ character\ representation\ (or\ '?'\ on\ error)\r\n
comment24.params=c
comment24.target=boolean\ isValidStateChar(char)
comment24.text=\r\n\ Check\ if\ a\ character\ represents\ a\ valid\ cell\ state\r\n\r\n\ @param\ c\ the\ character\r\n\ @return\ true\ if\ this\ character\ represents\ a\ vaild\ cell\ state,\ otherwise\ false\r\n
comment25.params=seq\ showFullOnly
comment25.target=java.lang.String\ seqAsChar(java.lang.String,\ boolean)
comment25.text=\r\n\ Convert\ a\ cell\ state\ sequence\ string\ into\ a\ string\ representation\ using\ the\r\n\ display\ characters.\ If\ showFullOnly\ is\ set,\ the\ unknown\ cells\ are\ shown\ as\ empty.\r\n\r\n\ @param\ seq\ \ \ \ \ \ \ \ \ \ the\ cell\ state\ sequence\r\n\ @param\ showFullOnly\ show\ all\ non\ full\ cells\ as\ empty\r\n\ @return\ the\ sequence\ ready\ for\ display\r\n
comment26.params=seq
comment26.target=java.lang.String\ seqAsChar(java.lang.String)
comment26.text=\r\n\ Convert\ a\ cell\ state\ sequence\ string\ into\ a\ string\ representation\ using\ the\r\n\ display\ characters.\r\n\r\n\ @param\ seq\ the\ cell\ state\ sequence\r\n\ @return\ the\ sequence\ ready\ for\ display\r\n
comment27.params=state
comment27.target=char\ stateAsChar(int)
comment27.text=\r\n\ Convert\ an\ individual\ cell\ state\ into\ a\ display\ character\r\n\r\n\ @param\ state\ the\ cell\ state\r\n\ @return\ the\ character\ ready\ for\ display\r\n
comment28.params=c
comment28.target=int\ stateFromChar(char)
comment28.text=\r\n\ Convert\ a\ display\ character\ into\ a\ Nonogram\ cell\ state\r\n\r\n\ @param\ c\ the\ display\ character\r\n\ @return\ the\ cell\ state\r\n
comment3.params=
comment3.target=java.lang.String\ display()
comment3.text=\r\n\ A\ string\ representation\ of\ a\ Nonogram\ puzzle\ suitable\ for\ console\ display\r\n\r\n\ @return\ a\ string\ representation\ of\ the\ puzzle\ for\ display\r\n
comment4.params=isRow\ idx
comment4.target=char\ alertChar(boolean,\ int)
comment4.text=\r\n\ Provides\ the\ character\ to\ annotate\ each\ row\ to\ indicate\ if\ it\ is\ valid\ or\ solved\r\n\r\n\ @param\ isRow\ a\ switch\ to\ indicate\ this\ is\ a\ row\ (true)\ or\ column\ (false)\r\n\ @param\ idx\ \ \ the\ row\ or\ column\ number\r\n\ @return\ the\ character\ to\ display\r\n
comment5.params=
comment5.target=void\ menu()
comment5.text=\r\n\ Main\ control\ loop.\ \ This\ displays\ the\ puzzle,\ then\ enters\ a\ loop\ displaying\ a\ menu,\r\n\ getting\ the\ user\ command,\ executing\ the\ command,\ displaying\ the\ puzzle\ and\ checking\r\n\ if\ further\ moves\ are\ possible\r\n
comment6.params=
comment6.target=void\ displayMenu()
comment6.text=\r\n\ Display\ the\ user\ menu\r\n
comment7.params=
comment7.target=java.lang.String\ getCommand()
comment7.text=\r\n\ Get\ the\ user\ command\r\n\r\n\ @return\ the\ user\ command\ string\r\n
comment8.params=command
comment8.target=void\ execute(java.lang.String)
comment8.text=\r\n\ Execute\ the\ user\ command\ string\r\n\r\n\ @param\ command\ the\ user\ command\ string\r\n
comment9.params=filePath
comment9.target=void\ load(java.lang.String)
numComments=29
